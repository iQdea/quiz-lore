import { Markup, Scenes } from 'telegraf';
import { emailLoginWizard, phoneLoginWizard, signoutWizard } from './auth';
import { editProfileWizard, getProfileWizard } from './profile';
import {
  createQuizWizard,
  editQuizWizard,
  getQuizHistoryWizard,
  getQuizUserCollectionWizard,
  getQuizWizard
} from './quiz';
import {
  getQuestionsCollectionWizard,
  createQuestionWizard,
  editQuestionWizard,
  deleteQuestionWizard
} from './question';
import {
  addOptionWizard,
  createOptionsWizard,
  deleteOptionWizard,
  editOptionWizard,
  getOptionsCollectionWizard
} from './option';

export const getProfileActionsKeyboard = () => {
  return Markup.inlineKeyboard(
    [
      Markup.button.callback('–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üì•', 'get_profile'),
      Markup.button.callback('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üîÑ', 'edit_profile'),
      Markup.button.callback('–û—Ç–º–µ–Ω–∞ üö´', 'cancel')
    ],
    { columns: 2 }
  );
};
export const getQuizActionsKeyboard = () => {
  return Markup.inlineKeyboard(
    [
      Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –∫–≤–∏–∑ üî®', 'create_quiz'),
      Markup.button.callback(`–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–æ–∏ –∫–≤–∏–∑—ã üì•`, `get_user_quiz_collection`),
      Markup.button.callback('–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—à–µ–¥—à–∏—Ö –∫–≤–∏–∑–æ–≤ üì•', 'get_history'),
      Markup.button.callback('–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–≤–∏–∑ üì•', 'get_quiz'),
      Markup.button.callback('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∏–∑ üîÑ', 'edit_quiz'),
      Markup.button.callback('–í–æ–ø—Ä–æ—Å—ã ‚ùì', 'questions'),
      Markup.button.callback('–û—Ç–º–µ–Ω–∞ üö´', 'cancel')
    ],
    { columns: 1 }
  );
};
export const getQuestionsActionsKeyboard = () => {
  return Markup.inlineKeyboard(
    [
      Markup.button.callback('–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞ üì•', 'show_questions'),
      Markup.button.callback(`–°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üî®`, `create_question`),
      Markup.button.callback('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîÑ', 'edit_question'),
      Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å üß∫', 'delete_question'),
      Markup.button.callback('–û–ø—Ü–∏–∏ üìù', 'options'),
      Markup.button.callback('–û—Ç–º–µ–Ω–∞ üö´', 'cancel')
    ],
    { columns: 2 }
  );
};
export const getOptionsActionsKeyboard = () => {
  return Markup.inlineKeyboard(
    [
      Markup.button.callback('–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ üì•', 'show_options'),
      Markup.button.callback(`–°–æ–∑–¥–∞—Ç—å –æ–ø—Ü–∏–∏ –∫ –≤–æ–ø—Ä–æ—Å—É üî®`, `create_options`),
      Markup.button.callback('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ü–∏—é üîÑ', 'edit_option'),
      Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –æ–ø—Ü–∏—é üß∫', 'delete_option'),
      Markup.button.callback('–û—Ç–º–µ–Ω–∞ üö´', 'cancel')
    ],
    { columns: 2 }
  );
};

export const mainWizard = new Scenes.WizardScene<any>('MAIN', async (ctx) => {
  if (ctx.session.messageCounter) {
    for (const i of ctx.session.messageCounter) {
      ctx.deleteMessage(i);
    }
    ctx.session.messageCounter = undefined;
  }
  if (ctx.session.last_bot_message_id) {
    ctx.deleteMessage(ctx.session.last_bot_message_id);
  }
  let msgid;
  if (!ctx.session.auth) {
    const message = await ctx.replyWithHTML(
      `<b>–ü—Ä–∏–≤–µ—Ç üñê</b>, <i>—á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É üëá–í–æ–π—Ç–∏ üö™üëá, ` +
        `–µ—Å–ª–∏ –≤—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ —Ä–∞–Ω–µ–µ</i>.`,
      Markup.inlineKeyboard([Markup.button.callback('–í–æ–π—Ç–∏ üö™', 'signinup')], { columns: 2 })
    );
    msgid = message.message_id;
  } else {
    const message = await ctx.reply(
      `–ú–µ–Ω—é.`,
      Markup.inlineKeyboard(
        [
          Markup.button.callback('–í—ã–π—Ç–∏ üö™', 'signout'),
          Markup.button.callback('–ü—Ä–æ—Ñ–∏–ª—å üíº', 'profile'),
          Markup.button.callback('–ö–≤–∏–∑ ü•á', 'quiz')
        ],
        { columns: 2 }
      )
    );
    msgid = message.message_id;
  }
  Object.assign(ctx.session, { last_bot_message_id: msgid });
  await ctx.scene.leave();
});

export const signinupWizard = new Scenes.WizardScene<any>('SIGNINUP', async (ctx) => {
  Object.assign(ctx.session, { previousSection: 'MAIN' });
  if (ctx.session.messageCounter) {
    for (const i of ctx.session.messageCounter) {
      ctx.deleteMessage(i);
    }
    ctx.session.messageCounter = undefined;
  }
  if (ctx.session.last_bot_message_id) {
    ctx.deleteMessage(ctx.session.last_bot_message_id);
  }
  const { message_id: msgid } = await ctx.replyWithHTML(
    '<u>–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º üîí</u><i> –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ üö™? –ï—Å–ª–∏ –≤—ã —Ä–∞–Ω–µ–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, ' +
      '—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ <u>–ª—é–±–æ–π –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ üîí</u>, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–µ–π—á–∞—Å</i>',
    Markup.inlineKeyboard(
      [
        Markup.button.callback('–ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±', 'phone'),
        Markup.button.callback('–ß–µ—Ä–µ–∑ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã üì®', 'email'),
        Markup.button.callback('–û—Ç–º–µ–Ω–∞ üö´', 'cancel')
      ],
      { columns: 1 }
    )
  );
  ctx.session.last_bot_message_id = msgid;
  await ctx.scene.leave();
});

export const allowPhoneWizard = new Scenes.WizardScene<any>('ALLOW_PHONE', async (ctx) => {
  Object.assign(ctx.session, { previousSection: 'SIGNINUP' });
  if (ctx.session.messageCounter) {
    for (const i of ctx.session.messageCounter) {
      ctx.deleteMessage(i);
    }
    ctx.session.messageCounter = undefined;
  }
  if (ctx.session.last_bot_message_id) {
    ctx.deleteMessage(ctx.session.last_bot_message_id);
  }
  const { message_id: msgid } = await ctx.replyWithHTML(
    '<b><u>–í—ã —É–≤–µ—Ä–µ–Ω—ã?</u></b><i>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤—ã –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º üß°</i>',
    Markup.keyboard([Markup.button.contactRequest('‚úî–î–∞'), Markup.button.callback('‚ùå–ù–µ—Ç', 'no')])
  );
  ctx.session.last_bot_message_id = msgid;
  await ctx.scene.leave();
});

export const profileWizard = new Scenes.WizardScene<any>('PROFILE', async (ctx) => {
  Object.assign(ctx.session, { previousSection: 'MAIN' });
  if (ctx.session.messageCounter) {
    for (const i of ctx.session.messageCounter) {
      ctx.deleteMessage(i);
    }
    ctx.session.messageCounter = undefined;
  }
  if (ctx.session.last_bot_message_id) {
    ctx.deleteMessage(ctx.session.last_bot_message_id);
  }
  const { message_id: msgid } = await ctx.reply('–î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º üë®‚Äç', getProfileActionsKeyboard());
  ctx.session.last_bot_message_id = msgid;
  await ctx.scene.leave();
});

export const quizWizard = new Scenes.WizardScene<any>('QUIZ', async (ctx) => {
  Object.assign(ctx.session, { previousSection: 'MAIN' });
  if (ctx.session.messageCounter) {
    for (const i of ctx.session.messageCounter) {
      ctx.deleteMessage(i);
    }
    ctx.session.messageCounter = undefined;
  }
  if (ctx.session.last_bot_message_id) {
    ctx.deleteMessage(ctx.session.last_bot_message_id);
  }
  const { message_id: msgid } = await ctx.reply('–î–µ–π—Å—Ç–≤–∏—è —Å –∫–≤–∏–∑–æ–º üîç', getQuizActionsKeyboard());
  ctx.session.last_bot_message_id = msgid;
  await ctx.scene.leave();
});

export const questionsWizard = new Scenes.WizardScene<any>('QUESTIONS', async (ctx) => {
  Object.assign(ctx.session, { previousSection: 'QUIZ' });
  if (ctx.session.messageCounter) {
    for (const i of ctx.session.messageCounter) {
      ctx.deleteMessage(i);
    }
    ctx.session.messageCounter = undefined;
  }
  if (ctx.session.last_bot_message_id) {
    ctx.deleteMessage(ctx.session.last_bot_message_id);
  }
  const { message_id: msgid } = await ctx.reply('–î–µ–π—Å—Ç–≤–∏—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ ‚ùì', getQuestionsActionsKeyboard());
  ctx.session.last_bot_message_id = msgid;
  await ctx.scene.leave();
});

export const optionsWizard = new Scenes.WizardScene<any>('OPTIONS', async (ctx) => {
  Object.assign(ctx.session, { previousSection: 'QUESTIONS' });
  if (ctx.session.messageCounter) {
    for (const i of ctx.session.messageCounter) {
      ctx.deleteMessage(i);
    }
    ctx.session.messageCounter = undefined;
  }
  if (ctx.session.last_bot_message_id) {
    ctx.deleteMessage(ctx.session.last_bot_message_id);
  }
  const { message_id: msgid } = await ctx.reply('–î–µ–π—Å—Ç–≤–∏—è —Å –æ–ø—Ü–∏—è–º–∏ üìù', getOptionsActionsKeyboard());
  ctx.session.last_bot_message_id = msgid;
  await ctx.scene.leave();
});

export const scenes: Scenes.WizardScene<any>[] = [
  signinupWizard,
  signoutWizard,
  emailLoginWizard,
  phoneLoginWizard,
  getProfileWizard,
  editProfileWizard,
  mainWizard,
  profileWizard,
  quizWizard,
  createQuizWizard,
  getQuizUserCollectionWizard,
  getQuizHistoryWizard,
  getQuizWizard,
  editQuizWizard,
  questionsWizard,
  getQuestionsCollectionWizard,
  createQuestionWizard,
  editQuestionWizard,
  deleteQuestionWizard,
  optionsWizard,
  createOptionsWizard,
  addOptionWizard,
  getOptionsCollectionWizard,
  editOptionWizard,
  deleteOptionWizard,
  allowPhoneWizard
];
