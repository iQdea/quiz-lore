import { Scenes } from 'telegraf';
import axios from 'axios';
import { getOptionsActionsKeyboard } from '../index';

export const getOptionsCollectionWizard = new Scenes.WizardScene<any>(
  'GET_OPTIONS_COLLECTION',
  async (ctx) => {
    if (ctx.session.messageCounter) {
      for (const i of ctx.session.messageCounter) {
        ctx.deleteMessage(i);
      }
      ctx.session.messageCounter = undefined;
    }
    if (ctx.session.last_bot_message_id) {
      ctx.deleteMessage(ctx.session.last_bot_message_id);
    }
    const { message_id: msgid } = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ id –≤–æ–ø—Ä–æ—Å–∞');
    ctx.session.last_bot_message_id = msgid;
    await ctx.wizard.next();
  },
  async (ctx) => {
    ctx.deleteMessage(ctx.session.last_bot_message_id);
    let res;
    try {
      res = await axios.get(`http://localhost:3300/option/${ctx.message.text}`);
      ctx.deleteMessage(ctx.message.message_id);
      const { data: options_collection } = res.data;
      if (options_collection.length === 0) {
        ctx.reply('There are no options');
      }
      const ids = [];
      if (options_collection.length === 0) {
        const { message_id: errid } = await ctx.reply(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –æ–ø—Ü–∏–∏`);
        ids.push(errid);
      }
      for (const item of options_collection) {
        const { message_id: msgid } = await ctx.reply(
          `ID: ${item.id} \n\n` +
            `–¢–µ–∫—Å—Ç: ${item.text} \n\n` +
            `–û—Ç–≤–µ—Ç: ${item.isAnswer ? '‚úî–î–∞' : '‚ùå–ù–µ—Ç'} \n\n` +
            `ID –≤–æ–ø—Ä–æ—Å–∞: ${item.questionId} \n\n`
        );
        ids.push(msgid);
      }
      const { message_id: dialogid } = await ctx.reply('–î–µ–π—Å—Ç–≤–∏—è —Å –æ–ø—Ü–∏—è–º–∏ üìù', getOptionsActionsKeyboard());
      ctx.session.last_bot_message_id = dialogid;
      Object.assign(ctx.session, { messageCounter: ids });
    } catch (error: any) {
      ctx.reply(`–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—à–∏–±–∫–∞ ${error.message}`);
    }
    await ctx.scene.leave();
  }
);
