import { Markup, Scenes } from 'telegraf';
import axios from 'axios';
import { Dictionary } from '../../interfaces/interface';
import { getOptionsActionsKeyboard } from '../index';
import appConfig from '../../../app.config';

let headerList: any;
export const editOptionWizard = new Scenes.WizardScene<any>(
  'EDIT_OPTION',
  async (ctx) => {
    if (ctx.session.messageCounter) {
      for (const i of ctx.session.messageCounter) {
        ctx.deleteMessage(i);
      }
      ctx.session.messageCounter = undefined;
    }
    if (ctx.session.last_bot_message_id) {
      ctx.deleteMessage(ctx.session.last_bot_message_id);
    }
    try {
      headerList = JSON.parse(JSON.stringify(ctx.session.auth));
    } catch {
      ctx.reply(
        '–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø—Ü–∏—é, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π—Ç–∏ üö™ :)',
        Markup.inlineKeyboard([Markup.button.callback('–í–æ–π—Ç–∏ üö™', 'signinup')], { columns: 2 })
      );
      return;
    }
    const { message_id: msgid } = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ id –æ–ø—Ü–∏–∏');
    ctx.session.last_bot_message_id = msgid;
    await ctx.wizard.next();
  },
  async (ctx) => {
    ctx.deleteMessage(ctx.session.last_bot_message_id);
    Object.assign(ctx.wizard.state, { edit: { optionId: ctx.message.text } });
    ctx.deleteMessage(ctx.message.message_id);
    const { message_id: msgid } = await ctx.reply(
      '–í–≤–µ–¥–∏—Ç–µ –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è',
      Markup.inlineKeyboard([
        Markup.button.callback('–¢–µ–∫—Å—Ç', 'text'),
        Markup.button.callback('–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç–æ–º', 'isAnswer')
      ])
    );
    ctx.session.last_bot_message_id = msgid;
    await ctx.wizard.next();
  },
  async (ctx) => {
    ctx.deleteMessage(ctx.session.last_bot_message_id);
    Object.assign(ctx.wizard.state.edit, { propertyName: ctx.update.callback_query.data });
    const { message_id: msgid } = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
    ctx.session.last_bot_message_id = msgid;
    await ctx.wizard.next();
  },
  async (ctx) => {
    ctx.deleteMessage(ctx.session.last_bot_message_id);
    if (ctx.message.text === 'true') {
      Object.assign(ctx.wizard.state.edit, { propertyValue: true });
    } else if (ctx.message.text === 'false') {
      Object.assign(ctx.wizard.state.edit, { propertyValue: false });
    } else {
      Object.assign(ctx.wizard.state.edit, { propertyValue: ctx.message.text });
    }
    ctx.deleteMessage(ctx.message.message_id);
    const changes = {} as Dictionary;
    changes[ctx.wizard.state.edit.propertyName] = ctx.wizard.state.edit.propertyValue;
    let res;
    try {
      res = await axios.patch(
        `${appConfig().host}/option/${ctx.wizard.state.edit.optionId}`,
        { ...changes },
        {
          headers: {
            Cookie: `sAccessToken=${headerList.sAccessToken}; sIdRefreshToken=${headerList.sIdRefreshToken}`
          }
        }
      );
      const { data: option } = res.data;
      const { message_id: msgid } = await ctx.reply(
        `ID: ${option.id} \n\n` +
          `–¢–µ–∫—Å—Ç: ${option.text} \n\n` +
          `–û—Ç–≤–µ—Ç: ${option.isAnswer ? '‚úî–î–∞' : '‚ùå–ù–µ—Ç'} \n\n` +
          `ID –≤–æ–ø—Ä–æ—Å–∞: ${option.questionId} \n\n`
      );
      const { message_id: dialogid } = await ctx.reply('–î–µ–π—Å—Ç–≤–∏—è —Å –æ–ø—Ü–∏—è–º–∏ üìù', getOptionsActionsKeyboard());
      ctx.session.last_bot_message_id = dialogid;
      Object.assign(ctx.session, { messageCounter: [msgid] });
    } catch (error: any) {
      ctx.reply(`–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—à–∏–±–∫–∞ ${error.data ? error.data.message : error.message}`);
    }
    await ctx.scene.leave();
  }
);
